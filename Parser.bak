#lang racket

(define (parse path)
  (define charList (string->list (file->string path)))
  (define tokens (scan (cons charList (list))))
  tokens
  ;(car (program tokens))
)

;car of return contains success or error cdr contains line number if error
(define (program tokens)
  (if (linelist (take tokens (- (length tokens) 1)))
      (if (equal? (last tokens) "$$")
          (cons "success" (list))
          (error "did not end with $$")
          )
      (error "code was not valid. error on line: ")
      )
  )

; if exists line[eol] if line(take llist eol) linelist(rest linetail eol) else error cdr(line(take llist eol)) else line(llist)
(define (linelist llist)
  (if (equal? null llist)
      (cons #t "success")
      (if (not (equal? (member "[EOL]" llist) #f))
          (if (car (line (take llist (index-of llist "[EOL]"))))
              (linelist (rest (member "[EOL]" llist)))
              (cons #f "Error on line" (cdr (line (take llist (index-of llist "[EOL]")))))
              )
          (line llist)
          )
      )
  )

(define (line _line)
  (display _line)
  (if (car (idx _line))
      (if (car (stmt(cdr (idx _line))))

          (if (not null (cdr (line_tail (cdr (stmt(idx _line))))))
              (cons (car (line_tail (cdr (stmt(idx _line))))) null)
              (cons #t (cdr (stmt(cdr (idx _line)))))
              )
          (cons #f "error on line")
          )
      (cons #f "error on line")
      )
  )

(define (stmt _stmt)
  (cond
    [(and (equal? (first stmt) "id") (equal? (second stmt) "="))(expr (rest(rest _stmt)))]
    [(equal? (first _stmt) "if") (expr (rest _stmt))]
    [(and (equal? (first _stmt) "read") (equal? (second _stmt) "id")) (cons #t (rest (rest _stmt)))]
    [(equal? (first _stmt) "write") (expr (rest _stmt))]
    [(and (equal? (first _stmt) "goto") (equal? (second _stmt) "idx")) (cons #t (rest (rest _stmt)))]
    [(and (equal? (first _stmt) "gosub") (equal? (second _stmt) "idx")) (cons #t (rest (rest _stmt)))]
    [(equal? (first _stmt) "return") (cons #t (rest _stmt))]
    )
  )
(define expr
  1
  )

(define (line_tail lineTail)
  (if (equal? (first lineTail) ":")
      (stmt (rest lineTail))
      (if (equal? (first lineTail) null)
          (cons #t lineTail)
          (error "lineTail must be empty or :")
          )
      )
  )

(define (idx _line)
  (if (equal? (first _line) "idx")
      (cons #t (rest _line))
      (error (string-append "line cannot begin with " (string (first line))))
      )
  )
                  

(define (scan pair)
  (define char (safe-first (car pair)))
  (if (equal? (car pair) null)
      (cdr pair)
      (cond
        [(equal? #\newline char) (scan(cons (rest (car pair)) (append (cdr pair) (list "[EOL]"))))]
        [(or (equal? char #\( ) (equal? char #\) ) (equal? char #\=) (equal? char #\:) ) (scan(cons (rest (car pair)) (append (cdr pair) (list (list->string (list char))))))]
        [(and (equal? char #\$) (equal? (second (car pair)) #\$)) (scan(cons (rest (rest (car pair))) (append (cdr pair) (list "$$"))))]
        [(char-whitespace? char) (scan (cons (rest (car pair)) (cdr pair)))]
        [(char-alphabetic? char) (scan (detect-alphabetic (car pair) (cdr pair) (list)))]
        ;[(char-numeric? char) (scan (cons (rest (car pair)) (append (cdr pair) (list (detect-numeric (first (car pair)))))))]
        [(or (char-numeric? char) (equal? #\- char) (equal? #\+ char)) (scan (cons (car (detect-numeric2 (car pair))) (append (cdr pair) (list (cdr (detect-numeric2 (car pair)))))))]
        ;[(or (equal? #\- char) (equal? #\+ char)) (scan (cons (rest (car pair)) (append (cdr pair) (list (detect-numsign (first (car pair)))))))]
        [else (error "invalid token in stream")]
        )
      )
  )

;found this function on https://docs.racket-lang.org/
(define (safe-first lst)
    (if (empty? lst)
        "nothing"
        (first lst)))

(define (detect-numsign char)
  (if (or (equal? #\- char) (equal? #\+ char))
      "numsign"
      (error"not a valid numsign")
      )
  )

(define (detect-numeric char)
  (if (equal? #\0 char)
      "digit"
      "nonzero_digit"
      )
  )
(define (detect-numeric2 charList)
  (if (or (equal? (first charList) #\-) (equal? (first charList) #\+))
      (if (char-whitespace? (second charList))
          (cons (rest charList) (string (first charList)))
          (if (or (equal? (cdr (detect-numeric2 (rest charList))) "digit") (equal? (cdr(detect-numeric2 (rest charList))) "nonzero_digit") (equal? (cdr(detect-numeric2 (rest charList))) "num") (equal? (cdr(detect-numeric2 (rest charList))) "idx"))
              (cons (car (detect-numeric2 (rest charList))) "num")
              (error "invalid symbol after - or +")
              )
          )
      (if (not (char-numeric? (first charList)))
          (error "number must have only digits")
          (if (not (char-numeric? (second charList)))
              (if (equal? (detect-numeric (first charList)) "nonzero_digit")
                  (cons (rest charList) "idx")
                  (cons (rest charList) "num")
                  )
              ;(cons (rest charList) (detect-numeric (first charList)))
              ;if detect numeric first == non zero -> idx else num
              (if (equal? "digit" (detect-numeric (first charList)))
                  (if (or (equal? "nonzero_digit" (detect-numeric (rest charList))) (equal? "digit" (detect-numeric (rest charList))) (equal? "num" (detect-numeric (rest charList))) (equal? "idx" (detect-numeric (rest charList))))
                      (cons (car (detect-numeric2 (rest charList))) "num")
                      (error "invalid character expected number")
                      )
                  (if (or (equal? (cdr (detect-numeric2 (rest charList))) "digit") (equal? (cdr (detect-numeric2 (rest charList))) "nonzero_digit") (equal? (cdr (detect-numeric2 (rest charList))) "idx") (equal? (cdr (detect-numeric2 (rest charList))) "num"))
                      (cons (car (detect-numeric2 (rest charList))) "idx")
                      (error"invalid number")
                      )
                  )
              )
          )
      )
  )

(define (detect-alphabetic charList tokenList token)
  (if (or (equal? charList null) (not (char-alphabetic? (first charList))))
      (if (detect-keyword (list->string token))
          (cons charList (append tokenList (list (list->string token))))
          (cons charList (append tokenList (list "id")))
          )
      (if (char-alphabetic? (first charList))
          (detect-alphabetic (rest charList) tokenList (append token (list (first charList))))
          (error "invalid character appearing after alphabetical")
          )
      )
  )

(define (detect-keyword token)
  (if (or (equal? token "if") (equal? token "then") (equal? token "read") (equal? token "write") (equal? token "goto") (equal? token "gosub") (equal? token "return"))
      #t
      #f
      )
  )